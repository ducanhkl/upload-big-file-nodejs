{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nvar uuid = 0;\n/** @private Note only worked in develop env. Not work in production. */\n\nexport function resetUuid() {\n  if (process.env.NODE_ENV !== 'production') {\n    uuid = 0;\n  }\n}\nexport default function useId(id) {\n  var _React$useId; // Inner id for accessibility usage. Only work in client side\n\n\n  var _React$useState = React.useState('ssr-id'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerId = _React$useState2[0],\n      setInnerId = _React$useState2[1]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var reactNativeId = (_React$useId = React.useId) === null || _React$useId === void 0 ? void 0 : _React$useId.call(React);\n  React.useEffect(function () {\n    if (!React.useId) {\n      var nextId = uuid;\n      uuid += 1;\n      setInnerId(\"rc_unique_\".concat(nextId));\n    }\n  }, []); // Developer passed id is single source of truth\n\n  if (id) {\n    return id;\n  } // Test env always return mock id\n\n\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  } // Return react native id or inner id\n\n\n  return reactNativeId || innerId;\n}","map":{"version":3,"sources":["/home/chuducanh/learn/large-file-upload/front-end-upload-large-file/node_modules/rc-util/es/hooks/useId.js"],"names":["_slicedToArray","React","uuid","resetUuid","process","env","NODE_ENV","useId","id","_React$useId","_React$useState","useState","_React$useState2","innerId","setInnerId","reactNativeId","call","useEffect","nextId","concat"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,IAAIC,IAAI,GAAG,CAAX;AACA;;AAEA,OAAO,SAASC,SAAT,GAAqB;AAC1B,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCJ,IAAAA,IAAI,GAAG,CAAP;AACD;AACF;AACD,eAAe,SAASK,KAAT,CAAeC,EAAf,EAAmB;AAChC,MAAIC,YAAJ,CADgC,CAGhC;;;AACA,MAAIC,eAAe,GAAGT,KAAK,CAACU,QAAN,CAAe,QAAf,CAAtB;AAAA,MACIC,gBAAgB,GAAGZ,cAAc,CAACU,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAF9B;AAAA,MAGIE,UAAU,GAAGF,gBAAgB,CAAC,CAAD,CAHjC,CAJgC,CAOM;;;AAGtC,MAAIG,aAAa,GAAG,CAACN,YAAY,GAAGR,KAAK,CAACM,KAAtB,MAAiC,IAAjC,IAAyCE,YAAY,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,YAAY,CAACO,IAAb,CAAkBf,KAAlB,CAAhG;AACAA,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAY;AAC1B,QAAI,CAAChB,KAAK,CAACM,KAAX,EAAkB;AAChB,UAAIW,MAAM,GAAGhB,IAAb;AACAA,MAAAA,IAAI,IAAI,CAAR;AACAY,MAAAA,UAAU,CAAC,aAAaK,MAAb,CAAoBD,MAApB,CAAD,CAAV;AACD;AACF,GAND,EAMG,EANH,EAXgC,CAiBxB;;AAER,MAAIV,EAAJ,EAAQ;AACN,WAAOA,EAAP;AACD,GArB+B,CAqB9B;;;AAGF,MAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,SAAP;AACD,GA1B+B,CA0B9B;;;AAGF,SAAOS,aAAa,IAAIF,OAAxB;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nvar uuid = 0;\n/** @private Note only worked in develop env. Not work in production. */\n\nexport function resetUuid() {\n  if (process.env.NODE_ENV !== 'production') {\n    uuid = 0;\n  }\n}\nexport default function useId(id) {\n  var _React$useId;\n\n  // Inner id for accessibility usage. Only work in client side\n  var _React$useState = React.useState('ssr-id'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerId = _React$useState2[0],\n      setInnerId = _React$useState2[1]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n  var reactNativeId = (_React$useId = React.useId) === null || _React$useId === void 0 ? void 0 : _React$useId.call(React);\n  React.useEffect(function () {\n    if (!React.useId) {\n      var nextId = uuid;\n      uuid += 1;\n      setInnerId(\"rc_unique_\".concat(nextId));\n    }\n  }, []); // Developer passed id is single source of truth\n\n  if (id) {\n    return id;\n  } // Test env always return mock id\n\n\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  } // Return react native id or inner id\n\n\n  return reactNativeId || innerId;\n}"]},"metadata":{},"sourceType":"module"}