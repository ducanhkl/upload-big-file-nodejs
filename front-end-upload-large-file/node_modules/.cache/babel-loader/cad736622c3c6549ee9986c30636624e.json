{"ast":null,"code":"var _jsxFileName = \"/home/chuducanh/learn/large-file-upload/front-end-upload-large-file/src/upload.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Progress, Upload } from \"antd\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { UploadOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst chunkSize = 10000;\nconst defaultUploadState = {\n  fileSize: 0,\n  fileId: \"\",\n  totalChunks: 0,\n  totalChunksUploaded: 0,\n  startChunk: 0,\n  endChunk: chunkSize,\n  fileToUpload: null,\n  uploadedBytes: 0\n};\nexport const UploadComponent = () => {\n  _s();\n\n  const [showProgress, setShowProgress] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [fileState, setFileState] = useState({ ...defaultUploadState\n  });\n  const [preUploadFileState, setPreUploadFileState] = useState({ ...defaultUploadState\n  });\n\n  const resetState = () => {\n    setFileState({\n      fileSize: 0,\n      fileId: \"\",\n      totalChunks: 0,\n      totalChunksUploaded: 0,\n      startChunk: 0,\n      endChunk: chunkSize,\n      fileToUpload: null,\n      uploadedBytes: 0\n    });\n  };\n\n  const uploadChunk = chunk => {\n    console.table({ ...fileState,\n      fileToUpload: \"\"\n    });\n    const {\n      fileId,\n      startChunk,\n      endChunk,\n      fileSize,\n      totalChunksUploaded,\n      uploadedBytes\n    } = fileState;\n    axios.post(\"http://localhost:3002/upload/files\", chunk, {\n      headers: {\n        \"x-file-name\": fileId,\n        \"Content-Range\": `bytes ${startChunk}-${endChunk}/${fileSize}`,\n        \"file-size\": fileSize\n      }\n    }).then(_ref => {\n      let {\n        data\n      } = _ref;\n      const endingChunk = Math.min(endChunk + chunkSize, fileSize);\n      setFileState({ ...fileState,\n        totalChunksUploaded: totalChunksUploaded + 1,\n        startChunk: endChunk,\n        endChunk: endingChunk === fileSize ? endingChunk + 1 : endingChunk,\n        uploadedBytes: endingChunk\n      });\n      const prog = fileSize ? uploadedBytes / fileSize * 100 : 0.1;\n      setProgress(prog);\n    });\n  };\n\n  const fileUpload = totalChunksUploaded => {\n    const {\n      totalChunks,\n      fileToUpload,\n      startChunk,\n      endChunk,\n      fileId\n    } = fileState;\n\n    if (totalChunksUploaded <= totalChunks) {\n      var chunk = fileToUpload.slice(startChunk, endChunk);\n      uploadChunk(chunk);\n    } else {\n      axios.post(\"http://localhost:3002/upload/complete\", {\n        headers: {\n          \"x-file-name\": fileId\n        }\n      }).then(resetState);\n    }\n  };\n\n  useEffect(() => {\n    if (fileState.fileSize > 0) {\n      fileUpload(fileState.totalChunksUploaded);\n    }\n  }, [fileState.fileSize, fileState.totalChunksUploaded]);\n\n  const getFileContext = e => {\n    console.log(\"change value 1111\");\n    setShowProgress(true);\n    setProgress(0);\n    resetState();\n    const file_obj = e.fileList[0].originFileObj;\n    const fileId = `${file_obj.size}-${file_obj.lastModified}-${file_obj.name}`;\n    axios.get(\"http://localhost:3002/upload/status\", {\n      headers: {\n        \"x-file-name\": fileId,\n        \"file-size\": file_obj.size\n      }\n    }).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      const uploadedBytes = data.uploaded;\n      const bytesRemaining = file_obj.size - uploadedBytes;\n      console.log(\"uploaded bytes \", uploadedBytes);\n      console.log(\"Byte remaining\", bytesRemaining);\n      const endingChunk = Math.min(uploadedBytes + chunkSize, file_obj.size);\n      setPreUploadFileState({\n        fileSize: file_obj.size,\n        fileId,\n        totalChunks: Math.ceil(bytesRemaining / chunkSize),\n        totalChunksUploaded: 0,\n        startChunk: uploadedBytes,\n        endChunk: endingChunk === fileState.fileSize ? endingChunk + 1 : endingChunk,\n        fileToUpload: file_obj,\n        uploadedBytes\n      });\n    }).catch(err => console.error(\"Status call failed \", err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Upload, {\n        onChange: getFileContext,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 31\n          }, this),\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), showProgress && /*#__PURE__*/_jsxDEV(Progress, {\n        percent: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(UploadComponent, \"qkg3mW9Ma32heJ2yAX+QOGCygWU=\");\n\n_c = UploadComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadComponent\");","map":{"version":3,"sources":["/home/chuducanh/learn/large-file-upload/front-end-upload-large-file/src/upload.js"],"names":["Button","Progress","Upload","axios","React","useEffect","useState","UploadOutlined","chunkSize","defaultUploadState","fileSize","fileId","totalChunks","totalChunksUploaded","startChunk","endChunk","fileToUpload","uploadedBytes","UploadComponent","showProgress","setShowProgress","progress","setProgress","fileState","setFileState","preUploadFileState","setPreUploadFileState","resetState","uploadChunk","chunk","console","table","post","headers","then","data","endingChunk","Math","min","prog","fileUpload","slice","getFileContext","e","log","file_obj","fileList","originFileObj","size","lastModified","name","get","uploaded","bytesRemaining","ceil","catch","err","error"],"mappings":"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","sourcesContent":["\n\nimport { Button, Progress, Upload } from \"antd\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { UploadOutlined } from '@ant-design/icons';\n\nconst chunkSize = 10000;\n\n\nconst defaultUploadState = {\n    fileSize: 0,\n    fileId: \"\",\n    totalChunks: 0,\n    totalChunksUploaded: 0,\n    startChunk: 0,\n    endChunk: chunkSize,\n    fileToUpload: null,\n    uploadedBytes: 0,\n}\n\nexport const UploadComponent = () => {\n\n    const [showProgress, setShowProgress] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const [fileState, setFileState] = useState({\n        ...defaultUploadState,\n    });\n\n    const [preUploadFileState, setPreUploadFileState] = useState({\n        ...defaultUploadState,\n    })\n\n\n\n    const resetState = () => {\n        setFileState({\n            fileSize: 0,\n            fileId: \"\",\n            totalChunks: 0,\n            totalChunksUploaded: 0,\n            startChunk: 0,\n            endChunk: chunkSize,\n            fileToUpload: null,\n            uploadedBytes: 0,\n        });\n    };\n\n    const uploadChunk = (chunk) => {\n        console.table({ ...fileState, fileToUpload: \"\" });\n        const {\n            fileId,\n            startChunk,\n            endChunk,\n            fileSize,\n            totalChunksUploaded,\n            uploadedBytes,\n        } = fileState;\n        axios\n            .post(\"http://localhost:3002/upload/files\", chunk, {\n                headers: {\n                    \"x-file-name\": fileId,\n                    \"Content-Range\": `bytes ${startChunk}-${endChunk}/${fileSize}`,\n                    \"file-size\": fileSize,\n                },\n            })\n            .then(({ data }) => {\n                const endingChunk = Math.min(endChunk + chunkSize, fileSize);\n\n                setFileState({\n                    ...fileState,\n                    totalChunksUploaded: totalChunksUploaded + 1,\n                    startChunk: endChunk,\n                    endChunk: endingChunk === fileSize ? endingChunk + 1 : endingChunk,\n                    uploadedBytes: endingChunk,\n                });\n                const prog = fileSize ? (uploadedBytes / fileSize) * 100 : 0.1;\n                setProgress(prog);\n            });\n    };\n\n    const fileUpload = (totalChunksUploaded) => {\n        const {\n            totalChunks,\n            fileToUpload,\n            startChunk,\n            endChunk,\n            fileId,\n        } = fileState;\n        if (totalChunksUploaded <= totalChunks) {\n            var chunk = fileToUpload.slice(startChunk, endChunk);\n            uploadChunk(chunk);\n        } else {\n            axios\n                .post(\"http://localhost:3002/upload/complete\", {\n                    headers: {\n                        \"x-file-name\": fileId,\n                    },\n                })\n                .then(resetState);\n        }\n    };\n\n    useEffect(() => {\n        if (fileState.fileSize > 0) {\n            fileUpload(fileState.totalChunksUploaded);\n        }\n    }, [fileState.fileSize, fileState.totalChunksUploaded]);\n\n\n\n    const getFileContext = (e) => {\n\n        console.log(\"change value 1111\")\n\n        setShowProgress(true);\n        setProgress(0);\n        resetState();\n\n        const file_obj = e.fileList[0].originFileObj;\n        const fileId = `${file_obj.size}-${file_obj.lastModified}-${file_obj.name}`;\n\n        axios\n            .get(\"http://localhost:3002/upload/status\", {\n                headers: {\n                    \"x-file-name\": fileId,\n                    \"file-size\": file_obj.size,\n                },\n            })\n            .then(({ data }) => {\n                const uploadedBytes = data.uploaded;\n                const bytesRemaining = file_obj.size - uploadedBytes;\n                console.log(\"uploaded bytes \", uploadedBytes);\n                console.log(\"Byte remaining\", bytesRemaining);\n                const endingChunk = Math.min(uploadedBytes + chunkSize, file_obj.size);\n                setPreUploadFileState({\n                    fileSize: file_obj.size,\n                    fileId,\n                    totalChunks: Math.ceil(bytesRemaining / chunkSize),\n                    totalChunksUploaded: 0,\n                    startChunk: uploadedBytes,\n                    endChunk:\n                        endingChunk === fileState.fileSize ? endingChunk + 1 : endingChunk,\n                    fileToUpload: file_obj,\n                    uploadedBytes,\n                });\n            })\n            .catch((err) => console.error(\"Status call failed \", err));\n    };\n\n\n    return (<>\n        <div>\n            <Upload onChange={getFileContext} >\n                <Button icon={<UploadOutlined />}>Upload</Button>\n            </Upload>\n            {showProgress && <Progress percent={progress} />}\n        </div>\n    </>)\n}"]},"metadata":{},"sourceType":"module"}