{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { FieldContext } from '.';\nimport warning from \"rc-util/es/warning\";\nimport { HOOK_MARK } from './FieldContext';\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { getNamePath, getValue } from './utils/valueUtil';\n\nfunction useWatch() {\n  var dependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var form = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var valueCacheRef = useRef();\n  valueCacheRef.current = value;\n  var fieldContext = useContext(FieldContext);\n  var formInstance = form || fieldContext;\n  var isValidForm = formInstance && formInstance._init; // Warning if not exist form instance\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(isValidForm, 'useWatch requires a form instance since it can not auto detect from context.');\n  }\n\n  var namePath = getNamePath(dependencies);\n  var namePathRef = useRef(namePath);\n  namePathRef.current = namePath;\n  useEffect(function () {\n    // Skip if not exist form instance\n    if (!isValidForm) {\n      return;\n    }\n\n    var getFieldsValue = formInstance.getFieldsValue,\n        getInternalHooks = formInstance.getInternalHooks;\n\n    var _getInternalHooks = getInternalHooks(HOOK_MARK),\n        registerWatch = _getInternalHooks.registerWatch;\n\n    var cancelRegister = registerWatch(function (store) {\n      var newValue = getValue(store, namePathRef.current);\n\n      if (valueCacheRef.current !== newValue) {\n        setValue(newValue);\n      }\n    }); // TODO: We can improve this perf in future\n\n    var initialValue = getValue(getFieldsValue(), namePathRef.current);\n    setValue(initialValue);\n    return cancelRegister;\n  }, // We do not need re-register since namePath content is the same\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  return value;\n}\n\nexport default useWatch;","map":{"version":3,"sources":["/home/chuducanh/learn/large-file-upload/front-end-upload-large-file/node_modules/rc-field-form/es/useWatch.js"],"names":["_slicedToArray","FieldContext","warning","HOOK_MARK","useState","useContext","useEffect","useRef","getNamePath","getValue","useWatch","dependencies","arguments","length","undefined","form","_useState","_useState2","value","setValue","valueCacheRef","current","fieldContext","formInstance","isValidForm","_init","process","env","NODE_ENV","namePath","namePathRef","getFieldsValue","getInternalHooks","_getInternalHooks","registerWatch","cancelRegister","store","newValue","initialValue"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,YAAT,QAA6B,GAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,mBAAtC;;AAEA,SAASC,QAAT,GAAoB;AAClB,MAAIC,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAvF;AACA,MAAIG,IAAI,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAjD;;AAEA,MAAIE,SAAS,GAAGZ,QAAQ,EAAxB;AAAA,MACIa,UAAU,GAAGjB,cAAc,CAACgB,SAAD,EAAY,CAAZ,CAD/B;AAAA,MAEIE,KAAK,GAAGD,UAAU,CAAC,CAAD,CAFtB;AAAA,MAGIE,QAAQ,GAAGF,UAAU,CAAC,CAAD,CAHzB;;AAKA,MAAIG,aAAa,GAAGb,MAAM,EAA1B;AACAa,EAAAA,aAAa,CAACC,OAAd,GAAwBH,KAAxB;AACA,MAAII,YAAY,GAAGjB,UAAU,CAACJ,YAAD,CAA7B;AACA,MAAIsB,YAAY,GAAGR,IAAI,IAAIO,YAA3B;AACA,MAAIE,WAAW,GAAGD,YAAY,IAAIA,YAAY,CAACE,KAA/C,CAbkB,CAaoC;;AAEtD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC1B,IAAAA,OAAO,CAACsB,WAAD,EAAc,8EAAd,CAAP;AACD;;AAED,MAAIK,QAAQ,GAAGrB,WAAW,CAACG,YAAD,CAA1B;AACA,MAAImB,WAAW,GAAGvB,MAAM,CAACsB,QAAD,CAAxB;AACAC,EAAAA,WAAW,CAACT,OAAZ,GAAsBQ,QAAtB;AACAvB,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAI,CAACkB,WAAL,EAAkB;AAChB;AACD;;AAED,QAAIO,cAAc,GAAGR,YAAY,CAACQ,cAAlC;AAAA,QACIC,gBAAgB,GAAGT,YAAY,CAACS,gBADpC;;AAGA,QAAIC,iBAAiB,GAAGD,gBAAgB,CAAC7B,SAAD,CAAxC;AAAA,QACI+B,aAAa,GAAGD,iBAAiB,CAACC,aADtC;;AAGA,QAAIC,cAAc,GAAGD,aAAa,CAAC,UAAUE,KAAV,EAAiB;AAClD,UAAIC,QAAQ,GAAG5B,QAAQ,CAAC2B,KAAD,EAAQN,WAAW,CAACT,OAApB,CAAvB;;AAEA,UAAID,aAAa,CAACC,OAAd,KAA0BgB,QAA9B,EAAwC;AACtClB,QAAAA,QAAQ,CAACkB,QAAD,CAAR;AACD;AACF,KANiC,CAAlC,CAZoB,CAkBhB;;AAEJ,QAAIC,YAAY,GAAG7B,QAAQ,CAACsB,cAAc,EAAf,EAAmBD,WAAW,CAACT,OAA/B,CAA3B;AACAF,IAAAA,QAAQ,CAACmB,YAAD,CAAR;AACA,WAAOH,cAAP;AACD,GAvBQ,EAuBN;AACH;AACA,IAzBS,CAAT;AA0BA,SAAOjB,KAAP;AACD;;AAED,eAAeR,QAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { FieldContext } from '.';\nimport warning from \"rc-util/es/warning\";\nimport { HOOK_MARK } from './FieldContext';\nimport { useState, useContext, useEffect, useRef } from 'react';\nimport { getNamePath, getValue } from './utils/valueUtil';\n\nfunction useWatch() {\n  var dependencies = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var form = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var valueCacheRef = useRef();\n  valueCacheRef.current = value;\n  var fieldContext = useContext(FieldContext);\n  var formInstance = form || fieldContext;\n  var isValidForm = formInstance && formInstance._init; // Warning if not exist form instance\n\n  if (process.env.NODE_ENV !== 'production') {\n    warning(isValidForm, 'useWatch requires a form instance since it can not auto detect from context.');\n  }\n\n  var namePath = getNamePath(dependencies);\n  var namePathRef = useRef(namePath);\n  namePathRef.current = namePath;\n  useEffect(function () {\n    // Skip if not exist form instance\n    if (!isValidForm) {\n      return;\n    }\n\n    var getFieldsValue = formInstance.getFieldsValue,\n        getInternalHooks = formInstance.getInternalHooks;\n\n    var _getInternalHooks = getInternalHooks(HOOK_MARK),\n        registerWatch = _getInternalHooks.registerWatch;\n\n    var cancelRegister = registerWatch(function (store) {\n      var newValue = getValue(store, namePathRef.current);\n\n      if (valueCacheRef.current !== newValue) {\n        setValue(newValue);\n      }\n    }); // TODO: We can improve this perf in future\n\n    var initialValue = getValue(getFieldsValue(), namePathRef.current);\n    setValue(initialValue);\n    return cancelRegister;\n  }, // We do not need re-register since namePath content is the same\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  return value;\n}\n\nexport default useWatch;"]},"metadata":{},"sourceType":"module"}